import logging

from telebot import TeleBot
from telebot.types import Message

from django.conf import settings
from django.core.management import BaseCommand

from bot.models import TgUser
from goals.models import Goal, GoalCategory, BoardParticipant

# =============== Enable logging  ==============================
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("start bot")

user_states = {'state': {}}
cat_id = []

logger.info(user_states)
logger.info(cat_id)

bot = TeleBot(settings.BOT_TOKEN, threaded=False)

allowed_commands = ['/goals', '/create', '/cancel']


@bot.message_handler(commands=['start', 'help', 'cancel'])
def handle_user_without_verification(msg: Message):
    """ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ """
    tg_user, _ = TgUser.objects.get_or_create(user_ud=msg.from_user.id,
                                              defaults={"chat_id": msg.chat.id, "username": msg.from_user.username})

    if tg_user.user:
        send_welcome(msg)

    else:
        bot.send_message(
            msg.chat.id,
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
            '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å\n'
            '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ https://example.com\n',
        )
        tg_user.set_verification_code()
        tg_user.save(update_fields=["verification_code"])
        bot.send_message(msg.chat.id, f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π  –∫–æ–¥: {tg_user.verification_code}")

    if 'user' in user_states['state']:
        del user_states['state']['user']
        del user_states['state']['chat_id']
        bot.send_message(tg_user.chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        if 'category' in user_states['state']:
            del user_states['state']['category']

        if 'goal_title' in user_states['state']:
            del user_states['state']['goal_title']

        if 'description' in user_states['state']:
            del user_states['state']['description']

        if 'due_date' in user_states['state']:
            del user_states['state']['due_date']


def send_welcome(msg: Message):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–º–æ—â–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö """
    if msg.text == '/start':
        bot.send_message(msg.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {msg.chat.first_name}\n"
                                      '–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                                      '/board -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –∑–∞–¥–∞—á\n'
                                      '/category -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n'
                                      '/goals -> –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n'
                                      '/create -> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏\n'
                                      '/cancel -> –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è)\n')

    elif ('user' not in user_states['state']) and (msg.text not in allowed_commands):
        bot.send_message(msg.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


@bot.message_handler(chat_types=['private'])
def handle_message(msg: Message):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º """
    tg_user, _ = TgUser.objects.get_or_create(user_ud=msg.from_user.id,
                                              defaults={"chat_id": msg.chat.id, "username": msg.from_user.username})

    if msg.text == '/board':
        boards = BoardParticipant.objects.filter(user=tg_user.user)
        if boards:
            [bot.send_message(msg.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {item.board}\n") for item in boards]
        else:
            bot.send_message(msg.chat.id, "–ù–µ—Ç —É –≤–∞—Å Board")

    elif msg.text == '/category':
        resp_categories: list[str] = [
            f'{category.id} {category.title}'
            for category in GoalCategory.objects.filter(
                board__participants__user=tg_user.user_id, is_deleted=False)]
        if resp_categories:
            bot.send_message(msg.chat.id, "üè∑ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n===================\n" + '\n'.join(resp_categories))
        else:
            bot.send_message(msg.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!')

    elif msg.text == '/goals':
        goals = Goal.objects.filter(user=tg_user.user)
        if goals.count() > 0:
            [bot.send_message(tg_user.chat_id,
                              f'–ù–∞–∑–≤–∞–Ω–∏–µ: {goal.title},\n'
                              f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {goal.category},\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {goal.description},\n'
                              f'–°—Ç–∞—Ç—É—Å: {goal.get_status_display()},\n'
                              f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {goal.user},\n'
                              f'–î–µ–¥–ª–∞–π–Ω {goal.due_date if goal.due_date else "–ù–µ—Ç"} \n') for goal in goals]
        else:
            bot.send_message(msg.chat.id, "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø—É—Å—Ç.")

    # ===================== CREATE GOALS ===========================================
    elif msg.text == '/create':
        categories = GoalCategory.objects.filter(user=tg_user.user)
        if categories.count() > 0:
            cat_text = ''
            for cat in categories:
                cat_text += f'{cat.id}: {cat.title} \n'
                cat_id.append(cat.id)
            bot.send_message(chat_id=tg_user.chat_id,
                             text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏:\n========================\n{cat_text}'
                                  f'–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã')

            if 'user' not in user_states['state']:
                user_states['state']['user'] = tg_user.user
                user_states['state']['chat_id'] = tg_user.chat_id

    elif (msg.text not in allowed_commands) and (user_states['state']['user']) \
            and ('category' not in user_states['state']):
        category = handle_save_category(msg, tg_user)
        if category:
            user_states['state']['category'] = category
            bot.send_message(tg_user.chat_id, f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:\n {category}.\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ü–µ–ª–∏.')

    # =============== –í–í–û–î –ó–ê–ì–û–õ–û–í–ö–ê –ò –ó–ê–ü–†–û–° –ù–ê –û–ü–ò–°–ê–ù–ò–ï =============
    elif (msg.text not in allowed_commands) and (user_states['state']['user']) \
            and (user_states['state']['category']) and ('goal_title' not in user_states['state']):
        user_states['state']['goal_title'] = msg.text
        bot.send_message(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

    # =============== –í–í–û–î –û–ü–ò–°–ê–ù–ò–Ø –ò –ó–ê–ü–†–û–° –ù–ê –î–ï–î–õ–ê–ô–ù ===============
    elif (msg.text not in allowed_commands) and (user_states['state']['user']) \
            and (user_states['state']['category']) and ('description' not in user_states['state']):
        user_states['state']['description'] = msg.text
        bot.send_message(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î(2022-01-01)')

    # ============== –í–í–û–î –î–ï–î–õ–ê–ô–ù–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î ==================
    elif (msg.text not in allowed_commands) and (user_states['state']['user']) \
            and (user_states['state']['category']) and ('due_date' not in user_states['state']):
        user_states['state']['due_date'] = msg.text

        goal = Goal.objects.create(title=user_states['state']['goal_title'],
                                   user=user_states['state']['user'],
                                   category=user_states['state']['category'],
                                   description=user_states['state']['description'],
                                   due_date=user_states['state']['due_date'])

        logger.info(goal)
        logger.info(cat_id)
        logger.info(user_states)

        bot.send_message(tg_user.chat_id, f'–¶–µ–ª—å: {goal.title} —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î')
        del user_states['state']['user']
        del user_states['state']['chat_id']
        del user_states['state']['category']
        del user_states['state']['goal_title']
        del user_states['state']['description']
        del user_states['state']['due_date']
        cat_id.clear()
        logger.info(user_states)
    # =============== END CREATE GOALS ==========================================================
    elif msg.text not in allowed_commands:
        bot.send_message(msg.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


def handle_save_category(msg: Message, tg_user: TgUser):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è """
    category_id = int(msg.text)
    category_data = GoalCategory.objects.filter(user=tg_user.user).get(pk=category_id)
    return category_data


class Command(BaseCommand):
    help = "run bot"

    def handle(self, *args, **options):
        bot.polling()


# from django.core.management import BaseCommand
#
# from bot.tg.client import TgClient
#
#
# class Command(BaseCommand):
#
#     def handle(self, *args, **options):
#         offset = 0
#         tg_client = TgClient()
#         while True:
#             res = tg_client.get_updates(offset=offset)
#             for item in res.result:
#                 offset = item.update_id + 1
#                 tg_client.send_message(chat_id=item.message.chat.id, text=item.message.text)